//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/developer/Desktop/DZConfigTools/DZConfigTools.Core/Generated\ParamFileLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419
namespace DZConfigTools.Core.Generated;
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ParamFileLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		PREPROCESSOR_DIRECTIVE=4, WHITESPACES=5, Class=6, Delete=7, Add_Assign=8, 
		Assign=9, LSBracket=10, RSBracket=11, LCBracket=12, RCBracket=13, Semicolon=14, 
		Colon=15, Comma=16, DoubleQuote=17, LiteralString=18, LiteralInteger=19, 
		LiteralFloat=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "Class", "Delete", "Add_Assign", 
		"Assign", "LSBracket", "RSBracket", "LCBracket", "RCBracket", "Semicolon", 
		"Colon", "Comma", "DoubleQuote", "LiteralString", "LiteralInteger", "LiteralFloat", 
		"EnforceEscapeSequence", "Diget", "Number", "DecimalNumber", "ScientificNumber", 
		"Scientific"
	};


	public ParamFileLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ParamFileLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'class'", "'delete'", "'+='", "'='", 
		"'['", "']'", "'{'", "'}'", "';'", "':'", "','", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "Class", "Delete", "Add_Assign", 
		"Assign", "LSBracket", "RSBracket", "LCBracket", "RCBracket", "Semicolon", 
		"Colon", "Comma", "DoubleQuote", "LiteralString", "LiteralInteger", "LiteralFloat"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParamFileLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParamFileLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,186,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,5,0,58,8,
		0,10,0,12,0,61,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,72,8,1,1,1,
		1,1,1,2,1,2,1,2,1,2,5,2,80,8,2,10,2,12,2,83,9,2,1,2,1,2,1,2,1,2,1,2,1,
		3,1,3,5,3,92,8,3,10,3,12,3,95,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,
		10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
		17,1,17,1,17,5,17,140,8,17,10,17,12,17,143,9,17,1,17,1,17,1,18,1,18,1,
		19,1,19,3,19,151,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,159,8,20,1,21,
		1,21,1,22,3,22,164,8,22,1,22,4,22,167,8,22,11,22,12,22,168,1,23,1,23,1,
		23,4,23,174,8,23,11,23,12,23,175,3,23,178,8,23,1,24,1,24,1,24,1,24,1,25,
		1,25,1,25,2,81,141,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,0,43,0,
		45,0,47,0,49,0,51,0,1,0,5,2,0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,48,
		57,2,0,69,69,101,101,2,0,43,43,45,45,192,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,1,53,1,0,0,0,3,71,1,0,0,0,5,75,1,0,0,0,7,89,1,0,0,0,9,98,
		1,0,0,0,11,102,1,0,0,0,13,108,1,0,0,0,15,115,1,0,0,0,17,118,1,0,0,0,19,
		120,1,0,0,0,21,122,1,0,0,0,23,124,1,0,0,0,25,126,1,0,0,0,27,128,1,0,0,
		0,29,130,1,0,0,0,31,132,1,0,0,0,33,134,1,0,0,0,35,136,1,0,0,0,37,146,1,
		0,0,0,39,150,1,0,0,0,41,158,1,0,0,0,43,160,1,0,0,0,45,163,1,0,0,0,47,170,
		1,0,0,0,49,179,1,0,0,0,51,183,1,0,0,0,53,54,5,47,0,0,54,55,5,47,0,0,55,
		59,1,0,0,0,56,58,8,0,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,
		60,1,0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,63,6,0,0,0,63,2,1,0,0,0,64,65,
		5,47,0,0,65,66,5,42,0,0,66,72,5,47,0,0,67,68,5,47,0,0,68,69,5,42,0,0,69,
		70,5,42,0,0,70,72,5,47,0,0,71,64,1,0,0,0,71,67,1,0,0,0,72,73,1,0,0,0,73,
		74,6,1,0,0,74,4,1,0,0,0,75,76,5,47,0,0,76,77,5,42,0,0,77,81,1,0,0,0,78,
		80,9,0,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,82,1,0,0,0,81,79,1,0,0,0,82,
		84,1,0,0,0,83,81,1,0,0,0,84,85,5,42,0,0,85,86,5,47,0,0,86,87,1,0,0,0,87,
		88,6,2,0,0,88,6,1,0,0,0,89,93,5,35,0,0,90,92,8,0,0,0,91,90,1,0,0,0,92,
		95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,
		97,6,3,0,0,97,8,1,0,0,0,98,99,7,1,0,0,99,100,1,0,0,0,100,101,6,4,0,0,101,
		10,1,0,0,0,102,103,5,99,0,0,103,104,5,108,0,0,104,105,5,97,0,0,105,106,
		5,115,0,0,106,107,5,115,0,0,107,12,1,0,0,0,108,109,5,100,0,0,109,110,5,
		101,0,0,110,111,5,108,0,0,111,112,5,101,0,0,112,113,5,116,0,0,113,114,
		5,101,0,0,114,14,1,0,0,0,115,116,5,43,0,0,116,117,5,61,0,0,117,16,1,0,
		0,0,118,119,5,61,0,0,119,18,1,0,0,0,120,121,5,91,0,0,121,20,1,0,0,0,122,
		123,5,93,0,0,123,22,1,0,0,0,124,125,5,123,0,0,125,24,1,0,0,0,126,127,5,
		125,0,0,127,26,1,0,0,0,128,129,5,59,0,0,129,28,1,0,0,0,130,131,5,58,0,
		0,131,30,1,0,0,0,132,133,5,44,0,0,133,32,1,0,0,0,134,135,5,34,0,0,135,
		34,1,0,0,0,136,141,5,34,0,0,137,140,3,41,20,0,138,140,9,0,0,0,139,137,
		1,0,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,142,1,0,0,0,141,139,1,0,0,
		0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,5,34,0,0,145,36,1,0,0,0,146,
		147,3,45,22,0,147,38,1,0,0,0,148,151,3,47,23,0,149,151,3,49,24,0,150,148,
		1,0,0,0,150,149,1,0,0,0,151,40,1,0,0,0,152,153,5,92,0,0,153,159,5,92,0,
		0,154,155,5,92,0,0,155,159,5,34,0,0,156,157,5,92,0,0,157,159,5,39,0,0,
		158,152,1,0,0,0,158,154,1,0,0,0,158,156,1,0,0,0,159,42,1,0,0,0,160,161,
		7,2,0,0,161,44,1,0,0,0,162,164,5,45,0,0,163,162,1,0,0,0,163,164,1,0,0,
		0,164,166,1,0,0,0,165,167,3,43,21,0,166,165,1,0,0,0,167,168,1,0,0,0,168,
		166,1,0,0,0,168,169,1,0,0,0,169,46,1,0,0,0,170,177,3,45,22,0,171,173,5,
		46,0,0,172,174,3,43,21,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,
		0,175,176,1,0,0,0,176,178,1,0,0,0,177,171,1,0,0,0,177,178,1,0,0,0,178,
		48,1,0,0,0,179,180,3,47,23,0,180,181,3,51,25,0,181,182,3,47,23,0,182,50,
		1,0,0,0,183,184,7,3,0,0,184,185,7,4,0,0,185,52,1,0,0,0,13,0,59,71,81,93,
		139,141,150,158,163,168,175,177,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
