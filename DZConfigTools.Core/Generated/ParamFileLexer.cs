//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/developer/Desktop/DZConfigTools/DZConfigTools.Core/Generated\ParamFileLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DZConfigTools.Core.Generated;
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ParamFileLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		PREPROCESSOR_DIRECTIVE=4, WHITESPACES=5, Class=6, Delete=7, Add_Assign=8, 
		Assign=9, LSBracket=10, RSBracket=11, LCBracket=12, RCBracket=13, Semicolon=14, 
		Colon=15, Comma=16, DoubleQuote=17, Identifier=18, LiteralString=19, LiteralInteger=20, 
		LiteralFloat=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "Class", "Delete", "Add_Assign", 
		"Assign", "LSBracket", "RSBracket", "LCBracket", "RCBracket", "Semicolon", 
		"Colon", "Comma", "DoubleQuote", "Identifier", "LiteralString", "LiteralInteger", 
		"LiteralFloat", "EnforceEscapeSequence", "Diget", "Number", "DecimalNumber", 
		"ScientificNumber", "Scientific"
	};


	public ParamFileLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ParamFileLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'class'", "'delete'", "'+='", "'='", 
		"'['", "']'", "'{'", "'}'", "';'", "':'", "','", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "Class", "Delete", "Add_Assign", 
		"Assign", "LSBracket", "RSBracket", "LCBracket", "RCBracket", "Semicolon", 
		"Colon", "Comma", "DoubleQuote", "Identifier", "LiteralString", "LiteralInteger", 
		"LiteralFloat"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParamFileLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParamFileLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,21,193,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,0,
		5,0,60,8,0,10,0,12,0,63,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,74,
		8,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,82,8,2,10,2,12,2,85,9,2,1,2,1,2,1,2,1,
		2,1,2,1,3,1,3,5,3,94,8,3,10,3,12,3,97,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,
		9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
		1,16,1,17,4,17,140,8,17,11,17,12,17,141,1,18,1,18,1,18,5,18,147,8,18,10,
		18,12,18,150,9,18,1,18,1,18,1,19,1,19,1,20,1,20,3,20,158,8,20,1,21,1,21,
		1,21,1,21,1,21,1,21,3,21,166,8,21,1,22,1,22,1,23,3,23,171,8,23,1,23,4,
		23,174,8,23,11,23,12,23,175,1,24,1,24,1,24,4,24,181,8,24,11,24,12,24,182,
		3,24,185,8,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,2,83,148,0,27,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
		16,33,17,35,18,37,19,39,20,41,21,43,0,45,0,47,0,49,0,51,0,53,0,1,0,6,2,
		0,10,10,13,13,3,0,9,10,13,13,32,32,4,0,48,57,65,90,95,95,97,122,1,0,48,
		57,2,0,69,69,101,101,2,0,43,43,45,45,200,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,1,55,1,0,0,0,3,73,1,0,0,0,5,77,1,0,0,0,7,91,
		1,0,0,0,9,100,1,0,0,0,11,104,1,0,0,0,13,110,1,0,0,0,15,117,1,0,0,0,17,
		120,1,0,0,0,19,122,1,0,0,0,21,124,1,0,0,0,23,126,1,0,0,0,25,128,1,0,0,
		0,27,130,1,0,0,0,29,132,1,0,0,0,31,134,1,0,0,0,33,136,1,0,0,0,35,139,1,
		0,0,0,37,143,1,0,0,0,39,153,1,0,0,0,41,157,1,0,0,0,43,165,1,0,0,0,45,167,
		1,0,0,0,47,170,1,0,0,0,49,177,1,0,0,0,51,186,1,0,0,0,53,190,1,0,0,0,55,
		56,5,47,0,0,56,57,5,47,0,0,57,61,1,0,0,0,58,60,8,0,0,0,59,58,1,0,0,0,60,
		63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,
		65,6,0,0,0,65,2,1,0,0,0,66,67,5,47,0,0,67,68,5,42,0,0,68,74,5,47,0,0,69,
		70,5,47,0,0,70,71,5,42,0,0,71,72,5,42,0,0,72,74,5,47,0,0,73,66,1,0,0,0,
		73,69,1,0,0,0,74,75,1,0,0,0,75,76,6,1,0,0,76,4,1,0,0,0,77,78,5,47,0,0,
		78,79,5,42,0,0,79,83,1,0,0,0,80,82,9,0,0,0,81,80,1,0,0,0,82,85,1,0,0,0,
		83,84,1,0,0,0,83,81,1,0,0,0,84,86,1,0,0,0,85,83,1,0,0,0,86,87,5,42,0,0,
		87,88,5,47,0,0,88,89,1,0,0,0,89,90,6,2,0,0,90,6,1,0,0,0,91,95,5,35,0,0,
		92,94,8,0,0,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,
		96,98,1,0,0,0,97,95,1,0,0,0,98,99,6,3,0,0,99,8,1,0,0,0,100,101,7,1,0,0,
		101,102,1,0,0,0,102,103,6,4,0,0,103,10,1,0,0,0,104,105,5,99,0,0,105,106,
		5,108,0,0,106,107,5,97,0,0,107,108,5,115,0,0,108,109,5,115,0,0,109,12,
		1,0,0,0,110,111,5,100,0,0,111,112,5,101,0,0,112,113,5,108,0,0,113,114,
		5,101,0,0,114,115,5,116,0,0,115,116,5,101,0,0,116,14,1,0,0,0,117,118,5,
		43,0,0,118,119,5,61,0,0,119,16,1,0,0,0,120,121,5,61,0,0,121,18,1,0,0,0,
		122,123,5,91,0,0,123,20,1,0,0,0,124,125,5,93,0,0,125,22,1,0,0,0,126,127,
		5,123,0,0,127,24,1,0,0,0,128,129,5,125,0,0,129,26,1,0,0,0,130,131,5,59,
		0,0,131,28,1,0,0,0,132,133,5,58,0,0,133,30,1,0,0,0,134,135,5,44,0,0,135,
		32,1,0,0,0,136,137,5,34,0,0,137,34,1,0,0,0,138,140,7,2,0,0,139,138,1,0,
		0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,36,1,0,0,0,143,
		148,5,34,0,0,144,147,3,43,21,0,145,147,9,0,0,0,146,144,1,0,0,0,146,145,
		1,0,0,0,147,150,1,0,0,0,148,149,1,0,0,0,148,146,1,0,0,0,149,151,1,0,0,
		0,150,148,1,0,0,0,151,152,5,34,0,0,152,38,1,0,0,0,153,154,3,47,23,0,154,
		40,1,0,0,0,155,158,3,49,24,0,156,158,3,51,25,0,157,155,1,0,0,0,157,156,
		1,0,0,0,158,42,1,0,0,0,159,160,5,92,0,0,160,166,5,92,0,0,161,162,5,92,
		0,0,162,166,5,34,0,0,163,164,5,92,0,0,164,166,5,39,0,0,165,159,1,0,0,0,
		165,161,1,0,0,0,165,163,1,0,0,0,166,44,1,0,0,0,167,168,7,3,0,0,168,46,
		1,0,0,0,169,171,5,45,0,0,170,169,1,0,0,0,170,171,1,0,0,0,171,173,1,0,0,
		0,172,174,3,45,22,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,
		176,1,0,0,0,176,48,1,0,0,0,177,184,3,47,23,0,178,180,5,46,0,0,179,181,
		3,45,22,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,
		0,0,183,185,1,0,0,0,184,178,1,0,0,0,184,185,1,0,0,0,185,50,1,0,0,0,186,
		187,3,49,24,0,187,188,3,53,26,0,188,189,3,49,24,0,189,52,1,0,0,0,190,191,
		7,4,0,0,191,192,7,5,0,0,192,54,1,0,0,0,14,0,61,73,83,95,141,146,148,157,
		165,170,175,182,184,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
