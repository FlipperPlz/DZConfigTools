//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/ryannkelly/Desktop/PlayerDataBot/DZConfigTools/DZConfigTools.Core/Generated/ParamFileParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DZConfigTools.Core.Generated;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ParamFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		PREPROCESSOR_DIRECTIVE=4, WHITESPACES=5, Class=6, Delete=7, Add_Assign=8, 
		Sub_Assign=9, Assign=10, LSBracket=11, RSBracket=12, LCBracket=13, RCBracket=14, 
		Semicolon=15, Colon=16, Comma=17, DoubleQuote=18, Identifier=19, LiteralString=20, 
		LiteralInteger=21, LiteralFloat=22;
	public const int
		RULE_computationalStart = 0, RULE_statement = 1, RULE_arrayAppension = 2, 
		RULE_arrayTruncation = 3, RULE_deleteStatement = 4, RULE_externalClassDeclaration = 5, 
		RULE_classDeclaration = 6, RULE_arrayDeclaration = 7, RULE_tokenDeclaration = 8, 
		RULE_literalArray = 9, RULE_literalString = 10, RULE_literalInteger = 11, 
		RULE_literalFloat = 12, RULE_literalOrArray = 13, RULE_literal = 14, RULE_arrayName = 15, 
		RULE_identifier = 16;
	public static readonly string[] ruleNames = {
		"computationalStart", "statement", "arrayAppension", "arrayTruncation", 
		"deleteStatement", "externalClassDeclaration", "classDeclaration", "arrayDeclaration", 
		"tokenDeclaration", "literalArray", "literalString", "literalInteger", 
		"literalFloat", "literalOrArray", "literal", "arrayName", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'class'", "'delete'", "'+='", "'-='", 
		"'='", "'['", "']'", "'{'", "'}'", "';'", "':'", "','", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "Class", "Delete", "Add_Assign", 
		"Sub_Assign", "Assign", "LSBracket", "RSBracket", "LCBracket", "RCBracket", 
		"Semicolon", "Colon", "Comma", "DoubleQuote", "Identifier", "LiteralString", 
		"LiteralInteger", "LiteralFloat"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParamFileParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParamFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParamFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParamFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ComputationalStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputationalStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalStartContext computationalStart() {
		ComputationalStartContext _localctx = new ComputationalStartContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Delete) | (1L << Identifier))) != 0)) {
				{
				{
				State = 34;
				statement();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ParamFileParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAppensionContext arrayAppension() {
			return GetRuleContext<ArrayAppensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTruncationContext arrayTruncation() {
			return GetRuleContext<ArrayTruncationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenDeclarationContext tokenDeclaration() {
			return GetRuleContext<TokenDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalClassDeclarationContext externalClassDeclaration() {
			return GetRuleContext<ExternalClassDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				deleteStatement();
				State = 41;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				arrayAppension();
				State = 44;
				Match(Semicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 46;
				arrayTruncation();
				State = 47;
				Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 49;
				arrayDeclaration();
				State = 50;
				Match(Semicolon);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 52;
				tokenDeclaration();
				State = 53;
				Match(Semicolon);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 55;
				classDeclaration();
				State = 56;
				Match(Semicolon);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 58;
				externalClassDeclaration();
				State = 59;
				Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAppensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayNameContext arrayName() {
			return GetRuleContext<ArrayNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add_Assign() { return GetToken(ParamFileParser.Add_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public ArrayAppensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAppension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterArrayAppension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitArrayAppension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAppension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAppensionContext arrayAppension() {
		ArrayAppensionContext _localctx = new ArrayAppensionContext(Context, State);
		EnterRule(_localctx, 4, RULE_arrayAppension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			arrayName();
			State = 64;
			Match(Add_Assign);
			State = 65;
			literalArray();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTruncationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayNameContext arrayName() {
			return GetRuleContext<ArrayNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub_Assign() { return GetToken(ParamFileParser.Sub_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public ArrayTruncationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTruncation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterArrayTruncation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitArrayTruncation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTruncation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTruncationContext arrayTruncation() {
		ArrayTruncationContext _localctx = new ArrayTruncationContext(Context, State);
		EnterRule(_localctx, 6, RULE_arrayTruncation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			arrayName();
			State = 68;
			Match(Sub_Assign);
			State = 69;
			literalArray();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(ParamFileParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(Delete);
			State = 72;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalClassDeclarationContext : ParserRuleContext {
		public IdentifierContext classname;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(ParamFileParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExternalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalClassDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterExternalClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitExternalClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalClassDeclarationContext externalClassDeclaration() {
		ExternalClassDeclarationContext _localctx = new ExternalClassDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_externalClassDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(Class);
			State = 75;
			_localctx.classname = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public IdentifierContext classname;
		public IdentifierContext superclass;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(ParamFileParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCBracket() { return GetToken(ParamFileParser.LCBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCBracket() { return GetToken(ParamFileParser.RCBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ParamFileParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(Class);
			State = 78;
			_localctx.classname = identifier();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 79;
				Match(Colon);
				State = 80;
				_localctx.superclass = identifier();
				}
			}

			State = 83;
			Match(LCBracket);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Delete) | (1L << Identifier))) != 0)) {
				{
				{
				State = 84;
				statement();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(RCBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public LiteralArrayContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ArrayNameContext arrayName() {
			return GetRuleContext<ArrayNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ParamFileParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_arrayDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			arrayName();
			State = 93;
			Match(Assign);
			State = 94;
			_localctx.value = literalArray();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenDeclarationContext : ParserRuleContext {
		public IdentifierContext tokenName;
		public LiteralContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ParamFileParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TokenDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterTokenDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitTokenDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokenDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenDeclarationContext tokenDeclaration() {
		TokenDeclarationContext _localctx = new TokenDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokenDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_localctx.tokenName = identifier();
			State = 97;
			Match(Assign);
			State = 98;
			_localctx.value = literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCBracket() { return GetToken(ParamFileParser.LCBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCBracket() { return GetToken(ParamFileParser.RCBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOrArrayContext[] literalOrArray() {
			return GetRuleContexts<LiteralOrArrayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOrArrayContext literalOrArray(int i) {
			return GetRuleContext<LiteralOrArrayContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ParamFileParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ParamFileParser.Comma, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(Context, State);
		EnterRule(_localctx, 18, RULE_literalArray);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(LCBracket);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LCBracket) | (1L << LiteralString) | (1L << LiteralInteger) | (1L << LiteralFloat))) != 0)) {
				{
				State = 101;
				literalOrArray();
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 102;
						Match(Comma);
						State = 103;
						literalOrArray();
						}
						} 
					}
					State = 108;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 109;
					Match(Comma);
					}
				}

				}
			}

			State = 114;
			Match(RCBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralString() { return GetToken(ParamFileParser.LiteralString, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 20, RULE_literalString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(LiteralString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralInteger() { return GetToken(ParamFileParser.LiteralInteger, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 22, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(LiteralInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralFloat() { return GetToken(ParamFileParser.LiteralFloat, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 24, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(LiteralFloat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralOrArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public LiteralOrArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalOrArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralOrArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralOrArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralOrArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralOrArrayContext literalOrArray() {
		LiteralOrArrayContext _localctx = new LiteralOrArrayContext(Context, State);
		EnterRule(_localctx, 26, RULE_literalOrArray);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LiteralString:
			case LiteralInteger:
			case LiteralFloat:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				literal();
				}
				break;
			case LCBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				literalArray();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 28, RULE_literal);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LiteralString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				literalString();
				}
				break;
			case LiteralInteger:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				literalInteger();
				}
				break;
			case LiteralFloat:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				literalFloat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(ParamFileParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(ParamFileParser.RSBracket, 0); }
		public ArrayNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterArrayName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitArrayName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayNameContext arrayName() {
		ArrayNameContext _localctx = new ArrayNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			identifier();
			State = 132;
			Match(LSBracket);
			State = 133;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ParamFileParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,138,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,
		62,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,
		1,6,1,6,3,6,82,8,6,1,6,1,6,5,6,86,8,6,10,6,12,6,89,9,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,105,8,9,10,9,12,9,108,9,9,
		1,9,3,9,111,8,9,3,9,113,8,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
		1,13,3,13,125,8,13,1,14,1,14,1,14,3,14,130,8,14,1,15,1,15,1,15,1,15,1,
		16,1,16,1,16,0,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,0,
		135,0,37,1,0,0,0,2,61,1,0,0,0,4,63,1,0,0,0,6,67,1,0,0,0,8,71,1,0,0,0,10,
		74,1,0,0,0,12,77,1,0,0,0,14,92,1,0,0,0,16,96,1,0,0,0,18,100,1,0,0,0,20,
		116,1,0,0,0,22,118,1,0,0,0,24,120,1,0,0,0,26,124,1,0,0,0,28,129,1,0,0,
		0,30,131,1,0,0,0,32,135,1,0,0,0,34,36,3,2,1,0,35,34,1,0,0,0,36,39,1,0,
		0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,1,1,0,0,0,39,37,1,0,0,0,40,41,3,8,4,
		0,41,42,5,15,0,0,42,62,1,0,0,0,43,44,3,4,2,0,44,45,5,15,0,0,45,62,1,0,
		0,0,46,47,3,6,3,0,47,48,5,15,0,0,48,62,1,0,0,0,49,50,3,14,7,0,50,51,5,
		15,0,0,51,62,1,0,0,0,52,53,3,16,8,0,53,54,5,15,0,0,54,62,1,0,0,0,55,56,
		3,12,6,0,56,57,5,15,0,0,57,62,1,0,0,0,58,59,3,10,5,0,59,60,5,15,0,0,60,
		62,1,0,0,0,61,40,1,0,0,0,61,43,1,0,0,0,61,46,1,0,0,0,61,49,1,0,0,0,61,
		52,1,0,0,0,61,55,1,0,0,0,61,58,1,0,0,0,62,3,1,0,0,0,63,64,3,30,15,0,64,
		65,5,8,0,0,65,66,3,18,9,0,66,5,1,0,0,0,67,68,3,30,15,0,68,69,5,9,0,0,69,
		70,3,18,9,0,70,7,1,0,0,0,71,72,5,7,0,0,72,73,3,32,16,0,73,9,1,0,0,0,74,
		75,5,6,0,0,75,76,3,32,16,0,76,11,1,0,0,0,77,78,5,6,0,0,78,81,3,32,16,0,
		79,80,5,16,0,0,80,82,3,32,16,0,81,79,1,0,0,0,81,82,1,0,0,0,82,83,1,0,0,
		0,83,87,5,13,0,0,84,86,3,2,1,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,
		0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,91,5,14,0,0,91,13,1,0,0,
		0,92,93,3,30,15,0,93,94,5,10,0,0,94,95,3,18,9,0,95,15,1,0,0,0,96,97,3,
		32,16,0,97,98,5,10,0,0,98,99,3,28,14,0,99,17,1,0,0,0,100,112,5,13,0,0,
		101,106,3,26,13,0,102,103,5,17,0,0,103,105,3,26,13,0,104,102,1,0,0,0,105,
		108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,110,1,0,0,0,108,106,1,
		0,0,0,109,111,5,17,0,0,110,109,1,0,0,0,110,111,1,0,0,0,111,113,1,0,0,0,
		112,101,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,115,5,14,0,0,115,19,
		1,0,0,0,116,117,5,20,0,0,117,21,1,0,0,0,118,119,5,21,0,0,119,23,1,0,0,
		0,120,121,5,22,0,0,121,25,1,0,0,0,122,125,3,28,14,0,123,125,3,18,9,0,124,
		122,1,0,0,0,124,123,1,0,0,0,125,27,1,0,0,0,126,130,3,20,10,0,127,130,3,
		22,11,0,128,130,3,24,12,0,129,126,1,0,0,0,129,127,1,0,0,0,129,128,1,0,
		0,0,130,29,1,0,0,0,131,132,3,32,16,0,132,133,5,11,0,0,133,134,5,12,0,0,
		134,31,1,0,0,0,135,136,5,19,0,0,136,33,1,0,0,0,9,37,61,81,87,106,110,112,
		124,129
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
